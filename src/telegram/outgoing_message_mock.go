package telegram

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i standup-bot/src/telegram.OutgoingMessage -o ./outgoing_message_mock.go -n OutgoingMessageMock

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OutgoingMessageMock implements OutgoingMessage
type OutgoingMessageMock struct {
	t minimock.Tester

	funcChatId          func() (i1 int64)
	inspectFuncChatId   func()
	afterChatIdCounter  uint64
	beforeChatIdCounter uint64
	ChatIdMock          mOutgoingMessageMockChatId

	funcText          func() (s1 string)
	inspectFuncText   func()
	afterTextCounter  uint64
	beforeTextCounter uint64
	TextMock          mOutgoingMessageMockText
}

// NewOutgoingMessageMock returns a mock for OutgoingMessage
func NewOutgoingMessageMock(t minimock.Tester) *OutgoingMessageMock {
	m := &OutgoingMessageMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ChatIdMock = mOutgoingMessageMockChatId{mock: m}

	m.TextMock = mOutgoingMessageMockText{mock: m}

	return m
}

type mOutgoingMessageMockChatId struct {
	mock               *OutgoingMessageMock
	defaultExpectation *OutgoingMessageMockChatIdExpectation
	expectations       []*OutgoingMessageMockChatIdExpectation
}

// OutgoingMessageMockChatIdExpectation specifies expectation struct of the OutgoingMessage.ChatId
type OutgoingMessageMockChatIdExpectation struct {
	mock *OutgoingMessageMock

	results *OutgoingMessageMockChatIdResults
	Counter uint64
}

// OutgoingMessageMockChatIdResults contains results of the OutgoingMessage.ChatId
type OutgoingMessageMockChatIdResults struct {
	i1 int64
}

// Expect sets up expected params for OutgoingMessage.ChatId
func (mmChatId *mOutgoingMessageMockChatId) Expect() *mOutgoingMessageMockChatId {
	if mmChatId.mock.funcChatId != nil {
		mmChatId.mock.t.Fatalf("OutgoingMessageMock.ChatId mock is already set by Set")
	}

	if mmChatId.defaultExpectation == nil {
		mmChatId.defaultExpectation = &OutgoingMessageMockChatIdExpectation{}
	}

	return mmChatId
}

// Inspect accepts an inspector function that has same arguments as the OutgoingMessage.ChatId
func (mmChatId *mOutgoingMessageMockChatId) Inspect(f func()) *mOutgoingMessageMockChatId {
	if mmChatId.mock.inspectFuncChatId != nil {
		mmChatId.mock.t.Fatalf("Inspect function is already set for OutgoingMessageMock.ChatId")
	}

	mmChatId.mock.inspectFuncChatId = f

	return mmChatId
}

// Return sets up results that will be returned by OutgoingMessage.ChatId
func (mmChatId *mOutgoingMessageMockChatId) Return(i1 int64) *OutgoingMessageMock {
	if mmChatId.mock.funcChatId != nil {
		mmChatId.mock.t.Fatalf("OutgoingMessageMock.ChatId mock is already set by Set")
	}

	if mmChatId.defaultExpectation == nil {
		mmChatId.defaultExpectation = &OutgoingMessageMockChatIdExpectation{mock: mmChatId.mock}
	}
	mmChatId.defaultExpectation.results = &OutgoingMessageMockChatIdResults{i1}
	return mmChatId.mock
}

//Set uses given function f to mock the OutgoingMessage.ChatId method
func (mmChatId *mOutgoingMessageMockChatId) Set(f func() (i1 int64)) *OutgoingMessageMock {
	if mmChatId.defaultExpectation != nil {
		mmChatId.mock.t.Fatalf("Default expectation is already set for the OutgoingMessage.ChatId method")
	}

	if len(mmChatId.expectations) > 0 {
		mmChatId.mock.t.Fatalf("Some expectations are already set for the OutgoingMessage.ChatId method")
	}

	mmChatId.mock.funcChatId = f
	return mmChatId.mock
}

// ChatId implements OutgoingMessage
func (mmChatId *OutgoingMessageMock) ChatId() (i1 int64) {
	mm_atomic.AddUint64(&mmChatId.beforeChatIdCounter, 1)
	defer mm_atomic.AddUint64(&mmChatId.afterChatIdCounter, 1)

	if mmChatId.inspectFuncChatId != nil {
		mmChatId.inspectFuncChatId()
	}

	if mmChatId.ChatIdMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmChatId.ChatIdMock.defaultExpectation.Counter, 1)

		mm_results := mmChatId.ChatIdMock.defaultExpectation.results
		if mm_results == nil {
			mmChatId.t.Fatal("No results are set for the OutgoingMessageMock.ChatId")
		}
		return (*mm_results).i1
	}
	if mmChatId.funcChatId != nil {
		return mmChatId.funcChatId()
	}
	mmChatId.t.Fatalf("Unexpected call to OutgoingMessageMock.ChatId.")
	return
}

// ChatIdAfterCounter returns a count of finished OutgoingMessageMock.ChatId invocations
func (mmChatId *OutgoingMessageMock) ChatIdAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChatId.afterChatIdCounter)
}

// ChatIdBeforeCounter returns a count of OutgoingMessageMock.ChatId invocations
func (mmChatId *OutgoingMessageMock) ChatIdBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChatId.beforeChatIdCounter)
}

// MinimockChatIdDone returns true if the count of the ChatId invocations corresponds
// the number of defined expectations
func (m *OutgoingMessageMock) MinimockChatIdDone() bool {
	for _, e := range m.ChatIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ChatIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterChatIdCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChatId != nil && mm_atomic.LoadUint64(&m.afterChatIdCounter) < 1 {
		return false
	}
	return true
}

// MinimockChatIdInspect logs each unmet expectation
func (m *OutgoingMessageMock) MinimockChatIdInspect() {
	for _, e := range m.ChatIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OutgoingMessageMock.ChatId")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ChatIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterChatIdCounter) < 1 {
		m.t.Error("Expected call to OutgoingMessageMock.ChatId")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChatId != nil && mm_atomic.LoadUint64(&m.afterChatIdCounter) < 1 {
		m.t.Error("Expected call to OutgoingMessageMock.ChatId")
	}
}

type mOutgoingMessageMockText struct {
	mock               *OutgoingMessageMock
	defaultExpectation *OutgoingMessageMockTextExpectation
	expectations       []*OutgoingMessageMockTextExpectation
}

// OutgoingMessageMockTextExpectation specifies expectation struct of the OutgoingMessage.Text
type OutgoingMessageMockTextExpectation struct {
	mock *OutgoingMessageMock

	results *OutgoingMessageMockTextResults
	Counter uint64
}

// OutgoingMessageMockTextResults contains results of the OutgoingMessage.Text
type OutgoingMessageMockTextResults struct {
	s1 string
}

// Expect sets up expected params for OutgoingMessage.Text
func (mmText *mOutgoingMessageMockText) Expect() *mOutgoingMessageMockText {
	if mmText.mock.funcText != nil {
		mmText.mock.t.Fatalf("OutgoingMessageMock.Text mock is already set by Set")
	}

	if mmText.defaultExpectation == nil {
		mmText.defaultExpectation = &OutgoingMessageMockTextExpectation{}
	}

	return mmText
}

// Inspect accepts an inspector function that has same arguments as the OutgoingMessage.Text
func (mmText *mOutgoingMessageMockText) Inspect(f func()) *mOutgoingMessageMockText {
	if mmText.mock.inspectFuncText != nil {
		mmText.mock.t.Fatalf("Inspect function is already set for OutgoingMessageMock.Text")
	}

	mmText.mock.inspectFuncText = f

	return mmText
}

// Return sets up results that will be returned by OutgoingMessage.Text
func (mmText *mOutgoingMessageMockText) Return(s1 string) *OutgoingMessageMock {
	if mmText.mock.funcText != nil {
		mmText.mock.t.Fatalf("OutgoingMessageMock.Text mock is already set by Set")
	}

	if mmText.defaultExpectation == nil {
		mmText.defaultExpectation = &OutgoingMessageMockTextExpectation{mock: mmText.mock}
	}
	mmText.defaultExpectation.results = &OutgoingMessageMockTextResults{s1}
	return mmText.mock
}

//Set uses given function f to mock the OutgoingMessage.Text method
func (mmText *mOutgoingMessageMockText) Set(f func() (s1 string)) *OutgoingMessageMock {
	if mmText.defaultExpectation != nil {
		mmText.mock.t.Fatalf("Default expectation is already set for the OutgoingMessage.Text method")
	}

	if len(mmText.expectations) > 0 {
		mmText.mock.t.Fatalf("Some expectations are already set for the OutgoingMessage.Text method")
	}

	mmText.mock.funcText = f
	return mmText.mock
}

// Text implements OutgoingMessage
func (mmText *OutgoingMessageMock) Text() (s1 string) {
	mm_atomic.AddUint64(&mmText.beforeTextCounter, 1)
	defer mm_atomic.AddUint64(&mmText.afterTextCounter, 1)

	if mmText.inspectFuncText != nil {
		mmText.inspectFuncText()
	}

	if mmText.TextMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmText.TextMock.defaultExpectation.Counter, 1)

		mm_results := mmText.TextMock.defaultExpectation.results
		if mm_results == nil {
			mmText.t.Fatal("No results are set for the OutgoingMessageMock.Text")
		}
		return (*mm_results).s1
	}
	if mmText.funcText != nil {
		return mmText.funcText()
	}
	mmText.t.Fatalf("Unexpected call to OutgoingMessageMock.Text.")
	return
}

// TextAfterCounter returns a count of finished OutgoingMessageMock.Text invocations
func (mmText *OutgoingMessageMock) TextAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmText.afterTextCounter)
}

// TextBeforeCounter returns a count of OutgoingMessageMock.Text invocations
func (mmText *OutgoingMessageMock) TextBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmText.beforeTextCounter)
}

// MinimockTextDone returns true if the count of the Text invocations corresponds
// the number of defined expectations
func (m *OutgoingMessageMock) MinimockTextDone() bool {
	for _, e := range m.TextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TextMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTextCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcText != nil && mm_atomic.LoadUint64(&m.afterTextCounter) < 1 {
		return false
	}
	return true
}

// MinimockTextInspect logs each unmet expectation
func (m *OutgoingMessageMock) MinimockTextInspect() {
	for _, e := range m.TextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OutgoingMessageMock.Text")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TextMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTextCounter) < 1 {
		m.t.Error("Expected call to OutgoingMessageMock.Text")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcText != nil && mm_atomic.LoadUint64(&m.afterTextCounter) < 1 {
		m.t.Error("Expected call to OutgoingMessageMock.Text")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OutgoingMessageMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockChatIdInspect()

		m.MinimockTextInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OutgoingMessageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OutgoingMessageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockChatIdDone() &&
		m.MinimockTextDone()
}
