package telegram

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i standup-bot/src/telegram.Router -o ./router_mock.go -n RouterMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RouterMock implements Router
type RouterMock struct {
	t minimock.Tester

	funcRoute          func(u1 Update, c1 Client) (err error)
	inspectFuncRoute   func(u1 Update, c1 Client)
	afterRouteCounter  uint64
	beforeRouteCounter uint64
	RouteMock          mRouterMockRoute
}

// NewRouterMock returns a mock for Router
func NewRouterMock(t minimock.Tester) *RouterMock {
	m := &RouterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RouteMock = mRouterMockRoute{mock: m}
	m.RouteMock.callArgs = []*RouterMockRouteParams{}

	return m
}

type mRouterMockRoute struct {
	mock               *RouterMock
	defaultExpectation *RouterMockRouteExpectation
	expectations       []*RouterMockRouteExpectation

	callArgs []*RouterMockRouteParams
	mutex    sync.RWMutex
}

// RouterMockRouteExpectation specifies expectation struct of the Router.Route
type RouterMockRouteExpectation struct {
	mock    *RouterMock
	params  *RouterMockRouteParams
	results *RouterMockRouteResults
	Counter uint64
}

// RouterMockRouteParams contains parameters of the Router.Route
type RouterMockRouteParams struct {
	u1 Update
	c1 Client
}

// RouterMockRouteResults contains results of the Router.Route
type RouterMockRouteResults struct {
	err error
}

// Expect sets up expected params for Router.Route
func (mmRoute *mRouterMockRoute) Expect(u1 Update, c1 Client) *mRouterMockRoute {
	if mmRoute.mock.funcRoute != nil {
		mmRoute.mock.t.Fatalf("RouterMock.Route mock is already set by Set")
	}

	if mmRoute.defaultExpectation == nil {
		mmRoute.defaultExpectation = &RouterMockRouteExpectation{}
	}

	mmRoute.defaultExpectation.params = &RouterMockRouteParams{u1, c1}
	for _, e := range mmRoute.expectations {
		if minimock.Equal(e.params, mmRoute.defaultExpectation.params) {
			mmRoute.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRoute.defaultExpectation.params)
		}
	}

	return mmRoute
}

// Inspect accepts an inspector function that has same arguments as the Router.Route
func (mmRoute *mRouterMockRoute) Inspect(f func(u1 Update, c1 Client)) *mRouterMockRoute {
	if mmRoute.mock.inspectFuncRoute != nil {
		mmRoute.mock.t.Fatalf("Inspect function is already set for RouterMock.Route")
	}

	mmRoute.mock.inspectFuncRoute = f

	return mmRoute
}

// Return sets up results that will be returned by Router.Route
func (mmRoute *mRouterMockRoute) Return(err error) *RouterMock {
	if mmRoute.mock.funcRoute != nil {
		mmRoute.mock.t.Fatalf("RouterMock.Route mock is already set by Set")
	}

	if mmRoute.defaultExpectation == nil {
		mmRoute.defaultExpectation = &RouterMockRouteExpectation{mock: mmRoute.mock}
	}
	mmRoute.defaultExpectation.results = &RouterMockRouteResults{err}
	return mmRoute.mock
}

//Set uses given function f to mock the Router.Route method
func (mmRoute *mRouterMockRoute) Set(f func(u1 Update, c1 Client) (err error)) *RouterMock {
	if mmRoute.defaultExpectation != nil {
		mmRoute.mock.t.Fatalf("Default expectation is already set for the Router.Route method")
	}

	if len(mmRoute.expectations) > 0 {
		mmRoute.mock.t.Fatalf("Some expectations are already set for the Router.Route method")
	}

	mmRoute.mock.funcRoute = f
	return mmRoute.mock
}

// When sets expectation for the Router.Route which will trigger the result defined by the following
// Then helper
func (mmRoute *mRouterMockRoute) When(u1 Update, c1 Client) *RouterMockRouteExpectation {
	if mmRoute.mock.funcRoute != nil {
		mmRoute.mock.t.Fatalf("RouterMock.Route mock is already set by Set")
	}

	expectation := &RouterMockRouteExpectation{
		mock:   mmRoute.mock,
		params: &RouterMockRouteParams{u1, c1},
	}
	mmRoute.expectations = append(mmRoute.expectations, expectation)
	return expectation
}

// Then sets up Router.Route return parameters for the expectation previously defined by the When method
func (e *RouterMockRouteExpectation) Then(err error) *RouterMock {
	e.results = &RouterMockRouteResults{err}
	return e.mock
}

// Route implements Router
func (mmRoute *RouterMock) Route(u1 Update, c1 Client) (err error) {
	mm_atomic.AddUint64(&mmRoute.beforeRouteCounter, 1)
	defer mm_atomic.AddUint64(&mmRoute.afterRouteCounter, 1)

	if mmRoute.inspectFuncRoute != nil {
		mmRoute.inspectFuncRoute(u1, c1)
	}

	mm_params := &RouterMockRouteParams{u1, c1}

	// Record call args
	mmRoute.RouteMock.mutex.Lock()
	mmRoute.RouteMock.callArgs = append(mmRoute.RouteMock.callArgs, mm_params)
	mmRoute.RouteMock.mutex.Unlock()

	for _, e := range mmRoute.RouteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRoute.RouteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRoute.RouteMock.defaultExpectation.Counter, 1)
		mm_want := mmRoute.RouteMock.defaultExpectation.params
		mm_got := RouterMockRouteParams{u1, c1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRoute.t.Errorf("RouterMock.Route got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRoute.RouteMock.defaultExpectation.results
		if mm_results == nil {
			mmRoute.t.Fatal("No results are set for the RouterMock.Route")
		}
		return (*mm_results).err
	}
	if mmRoute.funcRoute != nil {
		return mmRoute.funcRoute(u1, c1)
	}
	mmRoute.t.Fatalf("Unexpected call to RouterMock.Route. %v %v", u1, c1)
	return
}

// RouteAfterCounter returns a count of finished RouterMock.Route invocations
func (mmRoute *RouterMock) RouteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRoute.afterRouteCounter)
}

// RouteBeforeCounter returns a count of RouterMock.Route invocations
func (mmRoute *RouterMock) RouteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRoute.beforeRouteCounter)
}

// Calls returns a list of arguments used in each call to RouterMock.Route.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRoute *mRouterMockRoute) Calls() []*RouterMockRouteParams {
	mmRoute.mutex.RLock()

	argCopy := make([]*RouterMockRouteParams, len(mmRoute.callArgs))
	copy(argCopy, mmRoute.callArgs)

	mmRoute.mutex.RUnlock()

	return argCopy
}

// MinimockRouteDone returns true if the count of the Route invocations corresponds
// the number of defined expectations
func (m *RouterMock) MinimockRouteDone() bool {
	for _, e := range m.RouteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RouteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRouteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRoute != nil && mm_atomic.LoadUint64(&m.afterRouteCounter) < 1 {
		return false
	}
	return true
}

// MinimockRouteInspect logs each unmet expectation
func (m *RouterMock) MinimockRouteInspect() {
	for _, e := range m.RouteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RouterMock.Route with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RouteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRouteCounter) < 1 {
		if m.RouteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RouterMock.Route")
		} else {
			m.t.Errorf("Expected call to RouterMock.Route with params: %#v", *m.RouteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRoute != nil && mm_atomic.LoadUint64(&m.afterRouteCounter) < 1 {
		m.t.Error("Expected call to RouterMock.Route")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RouterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockRouteInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RouterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RouterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRouteDone()
}
