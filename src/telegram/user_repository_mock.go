package telegram

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i standup-bot/src/telegram.UserRepository -o ./user_repository_mock.go -n UserRepositoryMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// UserRepositoryMock implements UserRepository
type UserRepositoryMock struct {
	t minimock.Tester

	funcGetById          func(u1 uint) (u2 User)
	inspectFuncGetById   func(u1 uint)
	afterGetByIdCounter  uint64
	beforeGetByIdCounter uint64
	GetByIdMock          mUserRepositoryMockGetById
}

// NewUserRepositoryMock returns a mock for UserRepository
func NewUserRepositoryMock(t minimock.Tester) *UserRepositoryMock {
	m := &UserRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetByIdMock = mUserRepositoryMockGetById{mock: m}
	m.GetByIdMock.callArgs = []*UserRepositoryMockGetByIdParams{}

	return m
}

type mUserRepositoryMockGetById struct {
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockGetByIdExpectation
	expectations       []*UserRepositoryMockGetByIdExpectation

	callArgs []*UserRepositoryMockGetByIdParams
	mutex    sync.RWMutex
}

// UserRepositoryMockGetByIdExpectation specifies expectation struct of the UserRepository.GetById
type UserRepositoryMockGetByIdExpectation struct {
	mock    *UserRepositoryMock
	params  *UserRepositoryMockGetByIdParams
	results *UserRepositoryMockGetByIdResults
	Counter uint64
}

// UserRepositoryMockGetByIdParams contains parameters of the UserRepository.GetById
type UserRepositoryMockGetByIdParams struct {
	u1 uint
}

// UserRepositoryMockGetByIdResults contains results of the UserRepository.GetById
type UserRepositoryMockGetByIdResults struct {
	u2 User
}

// Expect sets up expected params for UserRepository.GetById
func (mmGetById *mUserRepositoryMockGetById) Expect(u1 uint) *mUserRepositoryMockGetById {
	if mmGetById.mock.funcGetById != nil {
		mmGetById.mock.t.Fatalf("UserRepositoryMock.GetById mock is already set by Set")
	}

	if mmGetById.defaultExpectation == nil {
		mmGetById.defaultExpectation = &UserRepositoryMockGetByIdExpectation{}
	}

	mmGetById.defaultExpectation.params = &UserRepositoryMockGetByIdParams{u1}
	for _, e := range mmGetById.expectations {
		if minimock.Equal(e.params, mmGetById.defaultExpectation.params) {
			mmGetById.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetById.defaultExpectation.params)
		}
	}

	return mmGetById
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.GetById
func (mmGetById *mUserRepositoryMockGetById) Inspect(f func(u1 uint)) *mUserRepositoryMockGetById {
	if mmGetById.mock.inspectFuncGetById != nil {
		mmGetById.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.GetById")
	}

	mmGetById.mock.inspectFuncGetById = f

	return mmGetById
}

// Return sets up results that will be returned by UserRepository.GetById
func (mmGetById *mUserRepositoryMockGetById) Return(u2 User) *UserRepositoryMock {
	if mmGetById.mock.funcGetById != nil {
		mmGetById.mock.t.Fatalf("UserRepositoryMock.GetById mock is already set by Set")
	}

	if mmGetById.defaultExpectation == nil {
		mmGetById.defaultExpectation = &UserRepositoryMockGetByIdExpectation{mock: mmGetById.mock}
	}
	mmGetById.defaultExpectation.results = &UserRepositoryMockGetByIdResults{u2}
	return mmGetById.mock
}

//Set uses given function f to mock the UserRepository.GetById method
func (mmGetById *mUserRepositoryMockGetById) Set(f func(u1 uint) (u2 User)) *UserRepositoryMock {
	if mmGetById.defaultExpectation != nil {
		mmGetById.mock.t.Fatalf("Default expectation is already set for the UserRepository.GetById method")
	}

	if len(mmGetById.expectations) > 0 {
		mmGetById.mock.t.Fatalf("Some expectations are already set for the UserRepository.GetById method")
	}

	mmGetById.mock.funcGetById = f
	return mmGetById.mock
}

// When sets expectation for the UserRepository.GetById which will trigger the result defined by the following
// Then helper
func (mmGetById *mUserRepositoryMockGetById) When(u1 uint) *UserRepositoryMockGetByIdExpectation {
	if mmGetById.mock.funcGetById != nil {
		mmGetById.mock.t.Fatalf("UserRepositoryMock.GetById mock is already set by Set")
	}

	expectation := &UserRepositoryMockGetByIdExpectation{
		mock:   mmGetById.mock,
		params: &UserRepositoryMockGetByIdParams{u1},
	}
	mmGetById.expectations = append(mmGetById.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.GetById return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockGetByIdExpectation) Then(u2 User) *UserRepositoryMock {
	e.results = &UserRepositoryMockGetByIdResults{u2}
	return e.mock
}

// GetById implements UserRepository
func (mmGetById *UserRepositoryMock) GetById(u1 uint) (u2 User) {
	mm_atomic.AddUint64(&mmGetById.beforeGetByIdCounter, 1)
	defer mm_atomic.AddUint64(&mmGetById.afterGetByIdCounter, 1)

	if mmGetById.inspectFuncGetById != nil {
		mmGetById.inspectFuncGetById(u1)
	}

	mm_params := &UserRepositoryMockGetByIdParams{u1}

	// Record call args
	mmGetById.GetByIdMock.mutex.Lock()
	mmGetById.GetByIdMock.callArgs = append(mmGetById.GetByIdMock.callArgs, mm_params)
	mmGetById.GetByIdMock.mutex.Unlock()

	for _, e := range mmGetById.GetByIdMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u2
		}
	}

	if mmGetById.GetByIdMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetById.GetByIdMock.defaultExpectation.Counter, 1)
		mm_want := mmGetById.GetByIdMock.defaultExpectation.params
		mm_got := UserRepositoryMockGetByIdParams{u1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetById.t.Errorf("UserRepositoryMock.GetById got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetById.GetByIdMock.defaultExpectation.results
		if mm_results == nil {
			mmGetById.t.Fatal("No results are set for the UserRepositoryMock.GetById")
		}
		return (*mm_results).u2
	}
	if mmGetById.funcGetById != nil {
		return mmGetById.funcGetById(u1)
	}
	mmGetById.t.Fatalf("Unexpected call to UserRepositoryMock.GetById. %v", u1)
	return
}

// GetByIdAfterCounter returns a count of finished UserRepositoryMock.GetById invocations
func (mmGetById *UserRepositoryMock) GetByIdAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetById.afterGetByIdCounter)
}

// GetByIdBeforeCounter returns a count of UserRepositoryMock.GetById invocations
func (mmGetById *UserRepositoryMock) GetByIdBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetById.beforeGetByIdCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.GetById.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetById *mUserRepositoryMockGetById) Calls() []*UserRepositoryMockGetByIdParams {
	mmGetById.mutex.RLock()

	argCopy := make([]*UserRepositoryMockGetByIdParams, len(mmGetById.callArgs))
	copy(argCopy, mmGetById.callArgs)

	mmGetById.mutex.RUnlock()

	return argCopy
}

// MinimockGetByIdDone returns true if the count of the GetById invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockGetByIdDone() bool {
	for _, e := range m.GetByIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetById != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByIdInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockGetByIdInspect() {
	for _, e := range m.GetByIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.GetById with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		if m.GetByIdMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserRepositoryMock.GetById")
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.GetById with params: %#v", *m.GetByIdMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetById != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		m.t.Error("Expected call to UserRepositoryMock.GetById")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetByIdInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetByIdDone()
}
