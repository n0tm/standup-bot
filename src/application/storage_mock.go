package application

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i standup-bot/src/application.Storage -o ./storage_mock.go -n StorageMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StorageMock implements Storage
type StorageMock struct {
	t minimock.Tester

	funcCreate          func(model interface{})
	inspectFuncCreate   func(model interface{})
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mStorageMockCreate

	funcFirst          func(model interface{}, conditions ...interface{})
	inspectFuncFirst   func(model interface{}, conditions ...interface{})
	afterFirstCounter  uint64
	beforeFirstCounter uint64
	FirstMock          mStorageMockFirst
}

// NewStorageMock returns a mock for Storage
func NewStorageMock(t minimock.Tester) *StorageMock {
	m := &StorageMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mStorageMockCreate{mock: m}
	m.CreateMock.callArgs = []*StorageMockCreateParams{}

	m.FirstMock = mStorageMockFirst{mock: m}
	m.FirstMock.callArgs = []*StorageMockFirstParams{}

	return m
}

type mStorageMockCreate struct {
	mock               *StorageMock
	defaultExpectation *StorageMockCreateExpectation
	expectations       []*StorageMockCreateExpectation

	callArgs []*StorageMockCreateParams
	mutex    sync.RWMutex
}

// StorageMockCreateExpectation specifies expectation struct of the Storage.Create
type StorageMockCreateExpectation struct {
	mock   *StorageMock
	params *StorageMockCreateParams

	Counter uint64
}

// StorageMockCreateParams contains parameters of the Storage.Create
type StorageMockCreateParams struct {
	model interface{}
}

// Expect sets up expected params for Storage.Create
func (mmCreate *mStorageMockCreate) Expect(model interface{}) *mStorageMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("StorageMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &StorageMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &StorageMockCreateParams{model}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the Storage.Create
func (mmCreate *mStorageMockCreate) Inspect(f func(model interface{})) *mStorageMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for StorageMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by Storage.Create
func (mmCreate *mStorageMockCreate) Return() *StorageMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("StorageMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &StorageMockCreateExpectation{mock: mmCreate.mock}
	}

	return mmCreate.mock
}

//Set uses given function f to mock the Storage.Create method
func (mmCreate *mStorageMockCreate) Set(f func(model interface{})) *StorageMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the Storage.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the Storage.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// Create implements Storage
func (mmCreate *StorageMock) Create(model interface{}) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(model)
	}

	mm_params := &StorageMockCreateParams{model}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := StorageMockCreateParams{model}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("StorageMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmCreate.funcCreate != nil {
		mmCreate.funcCreate(model)
		return
	}
	mmCreate.t.Fatalf("Unexpected call to StorageMock.Create. %v", model)

}

// CreateAfterCounter returns a count of finished StorageMock.Create invocations
func (mmCreate *StorageMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of StorageMock.Create invocations
func (mmCreate *StorageMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mStorageMockCreate) Calls() []*StorageMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*StorageMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *StorageMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.Create")
		} else {
			m.t.Errorf("Expected call to StorageMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to StorageMock.Create")
	}
}

type mStorageMockFirst struct {
	mock               *StorageMock
	defaultExpectation *StorageMockFirstExpectation
	expectations       []*StorageMockFirstExpectation

	callArgs []*StorageMockFirstParams
	mutex    sync.RWMutex
}

// StorageMockFirstExpectation specifies expectation struct of the Storage.First
type StorageMockFirstExpectation struct {
	mock   *StorageMock
	params *StorageMockFirstParams

	Counter uint64
}

// StorageMockFirstParams contains parameters of the Storage.First
type StorageMockFirstParams struct {
	model      interface{}
	conditions []interface{}
}

// Expect sets up expected params for Storage.First
func (mmFirst *mStorageMockFirst) Expect(model interface{}, conditions ...interface{}) *mStorageMockFirst {
	if mmFirst.mock.funcFirst != nil {
		mmFirst.mock.t.Fatalf("StorageMock.First mock is already set by Set")
	}

	if mmFirst.defaultExpectation == nil {
		mmFirst.defaultExpectation = &StorageMockFirstExpectation{}
	}

	mmFirst.defaultExpectation.params = &StorageMockFirstParams{model, conditions}
	for _, e := range mmFirst.expectations {
		if minimock.Equal(e.params, mmFirst.defaultExpectation.params) {
			mmFirst.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFirst.defaultExpectation.params)
		}
	}

	return mmFirst
}

// Inspect accepts an inspector function that has same arguments as the Storage.First
func (mmFirst *mStorageMockFirst) Inspect(f func(model interface{}, conditions ...interface{})) *mStorageMockFirst {
	if mmFirst.mock.inspectFuncFirst != nil {
		mmFirst.mock.t.Fatalf("Inspect function is already set for StorageMock.First")
	}

	mmFirst.mock.inspectFuncFirst = f

	return mmFirst
}

// Return sets up results that will be returned by Storage.First
func (mmFirst *mStorageMockFirst) Return() *StorageMock {
	if mmFirst.mock.funcFirst != nil {
		mmFirst.mock.t.Fatalf("StorageMock.First mock is already set by Set")
	}

	if mmFirst.defaultExpectation == nil {
		mmFirst.defaultExpectation = &StorageMockFirstExpectation{mock: mmFirst.mock}
	}

	return mmFirst.mock
}

//Set uses given function f to mock the Storage.First method
func (mmFirst *mStorageMockFirst) Set(f func(model interface{}, conditions ...interface{})) *StorageMock {
	if mmFirst.defaultExpectation != nil {
		mmFirst.mock.t.Fatalf("Default expectation is already set for the Storage.First method")
	}

	if len(mmFirst.expectations) > 0 {
		mmFirst.mock.t.Fatalf("Some expectations are already set for the Storage.First method")
	}

	mmFirst.mock.funcFirst = f
	return mmFirst.mock
}

// First implements Storage
func (mmFirst *StorageMock) First(model interface{}, conditions ...interface{}) {
	mm_atomic.AddUint64(&mmFirst.beforeFirstCounter, 1)
	defer mm_atomic.AddUint64(&mmFirst.afterFirstCounter, 1)

	if mmFirst.inspectFuncFirst != nil {
		mmFirst.inspectFuncFirst(model, conditions...)
	}

	mm_params := &StorageMockFirstParams{model, conditions}

	// Record call args
	mmFirst.FirstMock.mutex.Lock()
	mmFirst.FirstMock.callArgs = append(mmFirst.FirstMock.callArgs, mm_params)
	mmFirst.FirstMock.mutex.Unlock()

	for _, e := range mmFirst.FirstMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmFirst.FirstMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFirst.FirstMock.defaultExpectation.Counter, 1)
		mm_want := mmFirst.FirstMock.defaultExpectation.params
		mm_got := StorageMockFirstParams{model, conditions}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFirst.t.Errorf("StorageMock.First got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmFirst.funcFirst != nil {
		mmFirst.funcFirst(model, conditions...)
		return
	}
	mmFirst.t.Fatalf("Unexpected call to StorageMock.First. %v %v", model, conditions)

}

// FirstAfterCounter returns a count of finished StorageMock.First invocations
func (mmFirst *StorageMock) FirstAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFirst.afterFirstCounter)
}

// FirstBeforeCounter returns a count of StorageMock.First invocations
func (mmFirst *StorageMock) FirstBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFirst.beforeFirstCounter)
}

// Calls returns a list of arguments used in each call to StorageMock.First.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFirst *mStorageMockFirst) Calls() []*StorageMockFirstParams {
	mmFirst.mutex.RLock()

	argCopy := make([]*StorageMockFirstParams, len(mmFirst.callArgs))
	copy(argCopy, mmFirst.callArgs)

	mmFirst.mutex.RUnlock()

	return argCopy
}

// MinimockFirstDone returns true if the count of the First invocations corresponds
// the number of defined expectations
func (m *StorageMock) MinimockFirstDone() bool {
	for _, e := range m.FirstMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FirstMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFirstCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFirst != nil && mm_atomic.LoadUint64(&m.afterFirstCounter) < 1 {
		return false
	}
	return true
}

// MinimockFirstInspect logs each unmet expectation
func (m *StorageMock) MinimockFirstInspect() {
	for _, e := range m.FirstMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageMock.First with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FirstMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFirstCounter) < 1 {
		if m.FirstMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageMock.First")
		} else {
			m.t.Errorf("Expected call to StorageMock.First with params: %#v", *m.FirstMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFirst != nil && mm_atomic.LoadUint64(&m.afterFirstCounter) < 1 {
		m.t.Error("Expected call to StorageMock.First")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StorageMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateInspect()

		m.MinimockFirstInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockFirstDone()
}
